----------------1. What is the demographic profile of the bank's clients and how does it vary across districts?---------------

create or replace table czec_demographic_data_kpi as  // DEMOGRAPHIC_KPI IN PBI
SELECT  C.DISTRICT_ID,D.DISTRICT_NAME,D.REGION,D.AVERAGE_SALARY,C.CATEGORY,
SUM(CASE WHEN C.CATEGORY = '0-20' THEN 1 ELSE 0 END) AS "0-20",
SUM(CASE WHEN C.CATEGORY = '21-40' THEN 1 ELSE 0 END) AS "21-40",
SUM(CASE WHEN C.CATEGORY = '41-60' THEN 1 ELSE 0 END) AS "41-60",
SUM(CASE WHEN C.CATEGORY = '61-80' THEN 1 ELSE 0 END) AS "61-80",
SUM(CASE WHEN C.CATEGORY = '81-100' THEN 1 ELSE 0 END) AS "81-100",
ROUND(AVG(C.AGE),0) AS AVG_AGE,
SUM(CASE WHEN SEX = 'Male' THEN 1 ELSE 0 END) AS MALE_CLIENT ,
SUM(CASE WHEN SEX = 'Female' THEN 1 ELSE 0 END) AS FEMALE_CLIENT ,
COUNT(*)AS TOTAL_CLIENT
FROM CLIENT C
INNER JOIN DISTRICT D ON C.DISTRICT_ID = D.DISTRICT_CODE
GROUP BY 1,2,3,4,5;

SELECT CATEGORY,SUM("0-20"),SUM("21-40"),SUM("41-60"),SUM("61-80"),SUM("81-100") FROM czec_demographic_data_kpi GROUP BY 1;

SELECT * FROM czec_demographic_data_kpi;

----------2. How the banks have performed over the years. Give their detailed analysis year & month-wise.----------------

CREATE OR REPLACE PROCEDURE CREATE_PROC_LATEST_TXN_KPI()
RETURNS STRING
LANGUAGE SQL
AS
$$
CREATE OR REPLACE TABLE BANK_ACC_WITH_CLOSING_BALANCE AS  // LATEST_TXN_KPI IN PBI
SELECT BANK,ACCOUNT_ID,LATEST_TXN_DATE,FIN_YEAR,MAX(CLOSING_BALANCE)AS CLOSING_BALANCE FROM 
(
   SELECT CTE.*,
   CASE 
           WHEN CTE.LATEST_TXN_DATE >= '2022-04-01' THEN '2023FY'
           WHEN CTE.LATEST_TXN_DATE >= '2021-04-01'  AND CTE.LATEST_TXN_DATE <= '2022-3-31'THEN  '2022FY'
           WHEN CTE.LATEST_TXN_DATE >= '2020-04-01'  AND CTE.LATEST_TXN_DATE <= '2021-3-31'THEN  '2021FY'
           WHEN CTE.LATEST_TXN_DATE >= '2019-04-01'  AND CTE.LATEST_TXN_DATE <= '2020-3-31'THEN  '2020FY'
           WHEN CTE.LATEST_TXN_DATE >= '2018-04-01'  AND CTE.LATEST_TXN_DATE <= '2019-3-31'THEN  '2019FY'
           WHEN CTE.LATEST_TXN_DATE >= '2017-04-01'  AND CTE.LATEST_TXN_DATE <= '2018-3-31'THEN  '2018FY'
           WHEN CTE.LATEST_TXN_DATE >= '2016-04-01'  AND CTE.LATEST_TXN_DATE <= '2017-3-31'THEN  '2017FY'
    END AS FIN_YEAR,
   T.BALANCE AS CLOSING_BALANCE 
   FROM TRANSACTIONS T
   INNER JOIN 
   (
   SELECT BANK,
   ACCOUNT_ID,
   MAX(DATE) AS LATEST_TXN_DATE
   FROM TRANSACTIONS 
   GROUP BY 1,2 
   ORDER BY 1,2
   )
   CTE ON T.BANK = CTE.BANK AND T.ACCOUNT_ID = CTE.ACCOUNT_ID AND T.DATE = CTE.LATEST_TXN_DATE
   ORDER BY CTE.BANK,CTE.ACCOUNT_ID
   )
   GROUP BY 1,2,3,4
   ORDER BY 1,2,3,4;
$$;

SELECT * FROM BANK_ACC_WITH_CLOSING_BALANCE order by account_id;

SHOW PROCEDURES;

CALL CREATE_PROC_LATEST_TXN_KPI();

CREATE OR REPLACE TASK TASK_LATEST_TXN_KPI // CREATE TASK
WAREHOUSE = COMPUTE_WH
SCHEDULE = '2 MINUTE'
AS CALL CREATE_PROC_LATEST_TXN_KPI();

SHOW TASKS;

ALTER TASK TASK_LATEST_TXN_KPI RESUME;
ALTER TASK TASK_LATEST_TXN_KPI SUSPEND;



----------------BANKING KPI-----------------

CREATE OR REPLACE PROCEDURE CREATE_PROC_BANKING_KPI()
RETURNS STRING
LANGUAGE SQL
AS
$$
CREATE OR REPLACE TABLE BANKING_KPI AS // BANKING_KPI IN PBI
SELECT T.BANK,
BAWCB.ACCOUNT_ID,
YEAR(BAWCB.LATEST_TXN_DATE) AS TXN_YEAR,
MONTH(BAWCB.LATEST_TXN_DATE) AS TXN_MONTH,
A.ACCOUNT_TYPE,
FIN_YEAR,
COUNT(DISTINCT BAWCB.ACCOUNT_ID) AS TOTAL_ACC, 
COUNT(DISTINCT T.TRANS_ID) AS TOTAL_TXNS,
COUNT(CASE WHEN T.TYPE = 'Credit' THEN 1 END) AS DEPOSIT_COUNT ,
COUNT(CASE WHEN T.TYPE = 'Withdrawal' THEN 1 END) AS WITHDRAWAL_COUNT,
SUM(BAWCB.CLOSING_BALANCE) AS TOTAL_BALANCE,
ROUND((DEPOSIT_COUNT / TOTAL_TXNS) * 100,2)  AS DEPOSIT_PERC ,
ROUND((WITHDRAWAL_COUNT / TOTAL_TXNS) * 100,2) AS WITHDRAWAL_PERC ,
ROUND(TOTAL_BALANCE / TOTAL_ACC,0) AS AVG_BALANCE,
ROUND(TOTAL_TXNS/TOTAL_ACC,0) AS TPA,
CASE WHEN AVG_BALANCE > 3000000 THEN TOTAL_BALANCE * 0.05
     WHEN AVG_BALANCE > 1000000 AND AVG_BALANCE < 3000000 THEN TOTAL_BALANCE * 0.03
     ELSE 0
END AS PROFIT
FROM TRANSACTIONS AS T
INNER JOIN  BANK_ACC_WITH_CLOSING_BALANCE AS BAWCB ON T.ACCOUNT_ID = BAWCB.ACCOUNT_ID 
LEFT OUTER JOIN  ACCOUNT AS A ON T.ACCOUNT_ID = A.ACCOUNT_ID
GROUP BY 1,2,3,4,5,6
ORDER BY 1,2,3,4,5,6;
$$;

SELECT * FROM BANKING_KPI;

SELECT ACCOUNT_TYPE,FIN_YEAR,SUM(PROFIT) FROM BANKING_KPI GROUP BY 1,2 ORDER BY 2;

CREATE OR REPLACE TASK TASK_BANKING_KPI // CREATE TASK
WAREHOUSE = COMPUTE_WH
SCHEDULE = '5 MINUTE'
AS CALL CREATE_PROC_BANKING_KPI();

SHOW TASKS;

ALTER TASK TASK_BANKING_KPI RESUME;
ALTER TASK TASK_BANKING_KPI SUSPEND;

--------4. Which types of cards are most frequently used by the bank's clients and what is the overall profitability of the credit card business?---------

CREATE OR REPLACE PROCEDURE CREATE_PROC_CARD_KPI()
RETURNS STRING
LANGUAGE SQL
AS
$$
CREATE OR REPLACE TABLE MOST_FREQUENTLY_USED_CARDS AS // CARD_KPI IN PBI
SELECT  A.ACCOUNT_ID,
PROFIT,
FIN_YEAR,
C.CLIENT_ID,
NVL(CA.TYPE,'No Card Assigned')AS CARD_TYPE,
DATE AS ACCOUNT_OPENED_DATE,
ISSUED AS CARD_ISSUED_DATE,
NVL(DATEDIFF(MONTH,ACCOUNT_OPENED_DATE,CARD_ISSUED_DATE),0) AS DIFF_IN_MONTHS_TO_ISSUE_CARD
FROM CLIENT C
LEFT OUTER JOIN DISPOSITION D ON C.CLIENT_ID=D.CLIENT_ID
LEFT OUTER JOIN ACCOUNT A ON A.ACCOUNT_ID=D.ACCOUNT_ID
LEFT OUTER JOIN CARD CA ON D.DISP_ID=CA.DISP_ID
LEFT OUTER JOIN BANKING_KPI BK ON BK.ACCOUNT_ID=A.ACCOUNT_ID;
$$;

SELECT * FROM MOST_FREQUENTLY_USED_CARDS;

SELECT CARD_TYPE,ROUND(AVG(DIFF_IN_MONTHS_TO_ISSUE_CARD),0) AS AVG_TIME_TAKEN_TO_ISSUE_CARD_IN_MONTHS FROM MOST_FREQUENTLY_USED_CARDS GROUP BY 1;

CREATE OR REPLACE TASK TASK_CARD_KPI // CREATE TASK
WAREHOUSE = COMPUTE_WH
SCHEDULE = '7 MINUTE'
AS CALL CREATE_PROC_CARD_KPI();

SHOW TASKS;

ALTER TASK TASK_CARD_KPI RESUME;
ALTER TASK TASK_CARD_KPI SUSPEND;

------PROFITABILITY_BY_CARD_TYPE-------

SELECT BANK,CARD_TYPE,ROUND(SUM(PROFIT),2) AS PROFIT_BY_CARD_TYPE
FROM BANKING_KPI BK
JOIN MOST_FREQUENTLY_USED_CARDS MFUC ON BK.ACCOUNT_ID = MFUC.ACCOUNT_ID
GROUP BY 1,2
ORDER BY 1,2,3;

SELECT CARD_TYPE,ROUND(SUM(PROFIT),2) AS PROFIT_BY_CARD_TYPE
FROM BANKING_KPI BK
JOIN MOST_FREQUENTLY_USED_CARDS MFUC ON BK.ACCOUNT_ID = MFUC.ACCOUNT_ID
GROUP BY 1
ORDER BY 1,2;

-------6. What is the bankâ€™s loan portfolio and how does it vary across different purposes and client segments?---------

CREATE OR REPLACE PROCEDURE CREATE_PROC_LOAN_KPI()
RETURNS STRING
LANGUAGE SQL
AS
$$
CREATE OR REPLACE TABLE BANKING_LOAN_KPI AS // LOAN_KPI IN PBI
SELECT  T.BANK,YEAR(L.DATE) AS LOAN_YEAR,
MONTH(L.DATE) AS LOAN_MONTH,
L.ACCOUNT_ID,
A.ACCOUNT_TYPE,
STATUS,
DURATION,
PAYMENTS AS EMI,
L.AMOUNT AS LOAN_AMOUNT,
SUM(BAWCB.CLOSING_BALANCE) AS ACCOUNT_BALANCE
FROM TRANSACTIONS T
INNER JOIN  BANK_ACC_WITH_CLOSING_BALANCE AS BAWCB ON T.ACCOUNT_ID = BAWCB.ACCOUNT_ID 
INNER JOIN LOAN L ON T.ACCOUNT_ID=L.ACCOUNT_ID
INNER JOIN ACCOUNT A ON L.ACCOUNT_ID = A.ACCOUNT_ID
GROUP BY 1,2,3,4,5,6,7,8,9
ORDER BY 1,2,3,4,5,6,7;
$$;

SELECT * FROM BANKING_LOAN_KPI ;

SELECT DURATION,COUNT(DISTINCT ACCOUNT_ID) FROM BANKING_LOAN_KPI GROUP BY 1;
SELECT LOAN_YEAR,COUNT(DISTINCT ACCOUNT_ID) FROM BANKING_LOAN_KPI GROUP BY 1;
SELECT DISTINCT LOAN_YEAR FROM BANKING_LOAN_KPI;
SELECT DISTINCT BANK FROM BANKING_LOAN_KPI
SELECT DISTINCT YEAR(DATE) FROM LOAN;

CREATE OR REPLACE TASK TASK_LOAN_KPI // CREATE TASK
WAREHOUSE = COMPUTE_WH
SCHEDULE = '4 MINUTE'
AS CALL CREATE_PROC_LOAN_KPI();

SHOW TASKS;

ALTER TASK TASK_LOAN_KPI RESUME;
ALTER TASK TASK_LOAN_KPI SUSPEND;
 
---MAX_BALANCE_BY_ACCOUNT_AND_ACCOUNT_TYPE-----

CREATE OR REPLACE PROCEDURE CREATE_PROC_MAX_BAL_BY_ACC()
RETURNS STRING
LANGUAGE SQL
AS
$$
CREATE OR REPLACE TABLE ACC_ID_WITH_MAX_BAL_AND_ACC_TYPE AS  // MAX_BAL_BY_ACC IN PBI
SELECT B.ACCOUNT_ID,B.BANK,ACCOUNT_TYPE,B.MAX_CLOSING_BALANCE AS MAX_CLOSING_BALANCE
FROM ACCOUNT A INNER JOIN
(
SELECT BAWCB.ACCOUNT_ID,BANK,BAWCB.CLOSING_BALANCE AS MAX_CLOSING_BALANCE
FROM BANK_ACC_WITH_CLOSING_BALANCE BAWCB
INNER JOIN
(
SELECT ACCOUNT_ID,MAX(CLOSING_BALANCE) AS MAX_CLOSING_BALANCE FROM BANK_ACC_WITH_CLOSING_BALANCE GROUP BY 1
)
MCB ON BAWCB.ACCOUNT_ID=MCB.ACCOUNT_ID AND BAWCB.CLOSING_BALANCE=MCB.MAX_CLOSING_BALANCE
) B ON A.ACCOUNT_ID=B.ACCOUNT_ID
ORDER BY 1;
$$;

SELECT * FROM ACC_ID_WITH_MAX_BAL_AND_ACC_TYPE;

CREATE OR REPLACE TASK TASK_MAX_BAL_BY_ACC // CREATE TASK
WAREHOUSE = COMPUTE_WH
SCHEDULE = '3 MINUTE'
AS CALL CREATE_PROC_MAX_BAL_BY_ACC();

SHOW TASKS;

ALTER TASK TASK_MAX_BAL_BY_ACC RESUME;
ALTER TASK TASK_MAX_BAL_BY_ACC SUSPEND;

----TOP_ACC_WITHIN_BANK -----

CREATE OR REPLACE PROCEDURE CREATE_PROC_TOP_ACC_WITHIN_BANK()
RETURNS STRING
LANGUAGE SQL
AS
$$
CREATE OR REPLACE TABLE TOP_ACC_WITHIN_BANK AS
SELECT BANK,D.ACCOUNT_ID,ACCOUNT_TYPE,MAX_CLOSING_BALANCE
FROM
(
SELECT BAWCB.BANK AS BANK,ACCOUNT_ID,BAWCB.CLOSING_BALANCE AS MAX_CLOSING_BALANCE
FROM BANK_ACC_WITH_CLOSING_BALANCE BAWCB
INNER JOIN
(
SELECT BANK,MAX(CLOSING_BALANCE) AS MAX_CLOSING_BALANCE FROM BANK_ACC_WITH_CLOSING_BALANCE
GROUP BY 1
)
MCB ON BAWCB.BANK=MCB.BANK AND BAWCB.CLOSING_BALANCE=MCB.MAX_CLOSING_BALANCE
ORDER BY 1,2,3
) D JOIN ACCOUNT A ON D.ACCOUNT_ID=A.ACCOUNT_ID;
$$;

SELECT * FROM TOP_ACC_WITHIN_BANK ORDER BY BANK;

CREATE OR REPLACE TASK TASK_TOP_ACC_WITHIN_BANK // CREATE TASK
WAREHOUSE = COMPUTE_WH
SCHEDULE = '5 MINUTE'
AS CALL CREATE_PROC_TOP_ACC_WITHIN_BANK();

SHOW TASKS;

ALTER TASK TASK_TOP_ACC_WITHIN_BANK RESUME;
ALTER TASK TASK_TOP_ACC_WITHIN_BANK SUSPEND;

---TOP_ACC_BY_BANK_WITH_LOAN_STATUS ---

CREATE OR REPLACE PROCEDURE CREATE_PREMIUM_CUST_KPI()
RETURNS STRING
LANGUAGE SQL
AS
$$
CREATE OR REPLACE TABLE TOP_ACC_WITHIN_BANK_WITH_LOAN_STATUS AS // PREMIUM_CUST_KPI IN PBI
SELECT C.*,STATUS,AMOUNT AS LOAN_AMOUNT,NVL(M.CARD_TYPE,'No Card Assigned')AS CARD_TYPE
FROM TOP_ACC_WITHIN_BANK C
LEFT OUTER JOIN LOAN L ON C.ACCOUNT_ID=L.ACCOUNT_ID 
LEFT OUTER JOIN MOST_FREQUENTLY_USED_CARDS M ON C.ACCOUNT_ID=M.ACCOUNT_ID 
ORDER BY C.ACCOUNT_ID;
$$;

SELECT * FROM TOP_ACC_WITHIN_BANK_WITH_LOAN_STATUS ORDER BY BANK;

select bank,TXN_YEAR,SUM(TOTAL_BALANCE) FROM BANKING_KPI GROUP BY 1,2 ORDER BY 1,2;

CREATE OR REPLACE TASK TASK_PREMIUM_CUST_KPI // CREATE TASK
WAREHOUSE = COMPUTE_WH
SCHEDULE = '2 MINUTE'
AS CALL CREATE_PREMIUM_CUST_KPI();

SHOW TASKS;

ALTER TASK TASK_PREMIUM_CUST_KPI RESUME;
ALTER TASK TASK_PREMIUM_CUST_KPI SUSPEND;

------TOP 10 CUSTOMERS BY BANK-----

CREATE OR REPLACE PROCEDURE CREATE_TOP_10_BANK_CUSTOMERS()
RETURNS STRING
LANGUAGE SQL
AS
$$
CREATE OR REPLACE TABLE TOP_10_BANK_CUSTOMERS AS // TOP_10_BANK_CUSTOMERS
WITH CTE AS
(
SELECT BANK,ACCOUNT_ID AS ACC_ID,
CLOSING_BALANCE,DENSE_RANK() OVER(PARTITION BY BANK ORDER BY CLOSING_BALANCE DESC)AS RNK
FROM BANK_ACC_WITH_CLOSING_BALANCE
ORDER BY 1,3 DESC
),CTE2 AS
(
SELECT BANK,ACC_ID,CLOSING_BALANCE,ACCOUNT_TYPE,RNK
FROM CTE AS C 
INNER JOIN ACCOUNT AS BK ON C.ACC_ID=BK.ACCOUNT_ID 
)
SELECT * FROM CTE2 WHERE RNK<11 ORDER BY BANK,RNK ASC;
$$;

SELECT * FROM TOP_10_BANK_CUSTOMERS;

CREATE OR REPLACE TASK TASK_TOP_10_BANK_CUSTOMERS // CREATE TASK
WAREHOUSE = COMPUTE_WH
SCHEDULE = '2 MINUTE'
AS CALL CREATE_TOP_10_BANK_CUSTOMERS();

SHOW TASKS;

ALTER TASK TASK_TOP_10_BANK_CUSTOMERS RESUME;
ALTER TASK TASK_TOP_10_BANK_CUSTOMERS SUSPEND;

--------------------------------------------------------------------------------------------------------------------------------------------------

SELECT COUNT(*) FROM ACCOUNT; // 4,500
SELECT COUNT(*) FROM CARD;  // 892
SELECT COUNT(*) FROM CLIENT;  // 5,369
SELECT COUNT(*) FROM LOAN;  // 682
SELECT COUNT(*) FROM DISTRICT; // 77
SELECT COUNT(*) FROM DISPOSITION;  // 5,369
SELECT COUNT(*) FROM `ORDER`; // 6,471
SELECT COUNT(*) FROM BANK_ACC_WITH_CLOSING_BALANCE; // 21,171
SELECT COUNT(*) FROM BANKING_KPI; // 21,171
SELECT COUNT(*) FROM BANK_ACC_TYPES; // 21,171
SELECT COUNT(*) FROM CZEC_DEMOGRAPHIC_DATA_KPI; // 77
SELECT COUNT(*) FROM MOST_FREQUENTLY_USED_CARDS;  // 892
SELECT COUNT(*) FROM TRANSACTIONS; // 1,048,575
SELECT COUNT(*) FROM PROFITABILITY_BY_ACCOUNT_TYPE;  // 97,908
SELECT COUNT(*) FROM PROFITABILITY_BY_ACCOUNT_TYPE1; //
SELECT COUNT(*) FROM BANKING_LOAN_KPI; // 3631
SELECT COUNT(*) FROM BANKS_WITH_MAX_ACCOUNT_BALANCE_BY_ACCOUNT_ID; //4500
SELECT COUNT(*) FROM ACC_ID_WITH_MAX_BAL_AND_ACC_TYPE; //4500
SELECT COUNT(*) FROM BANK_ACC_TYPES; //21171
SELECT COUNT(*) FROM ; 


DROP TABLE BANK_ACC_TYPES;

show tables;
